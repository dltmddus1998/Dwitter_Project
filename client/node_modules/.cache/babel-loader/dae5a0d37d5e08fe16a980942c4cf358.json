{"ast":null,"code":"export default class HttpClient {\n  // 자체적으로 공통적인 baseURL을 가지고 있다.\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n  } // 비동기적으로 처리하는 fetch API\n  // URL, options \n  // 자체적으로는 브라우저 API에 있는 fetch API사용\n  // 비동기적인 사고내에서 동기적으로 코드를 작성하려면... await 사용\n\n\n  async fetch(url, options) {\n    const response = await fetch(`${this.baseURL}${url}`, { // 사용자가 원하는 옵션들을 하나하나씩 풀어서 추가\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        // 사용자가 원하는 옵션들의 헤더에 추가적으로 있는 부분들 추가\n        ...options.headers\n      }\n    }); // json()도 promise이므로 await 붙여준다.\n    // body가 없는 response에 json을 붙이면 에러가 일어날 수 있으므로\n    // 이 부분을 try/catch로 감싸준다.\n\n    let data;\n\n    try {\n      data = await response.json();\n    } catch (error) {\n      console.error(error);\n    } // response의 상태코드가 200대가 아니라면 \n\n\n    if (response.status > 299 || response.status < 200) {\n      const message = data && data.message ? data.message : 'Something went wrong! 😭';\n      throw new Error(message);\n    }\n\n    return data;\n  }\n\n}","map":{"version":3,"sources":["/Users/syl/Desktop/dreamCoding_code/12-client-template/client/src/network/http.js"],"names":["HttpClient","constructor","baseURL","fetch","url","options","response","headers","data","json","error","console","status","message","Error"],"mappings":"AAAA,eAAe,MAAMA,UAAN,CAAiB;AAC5B;AACAC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKA,OAAL,GAAeA,OAAf;AACH,GAJ2B,CAM5B;AACA;AACA;AACA;;;AACW,QAALC,KAAK,CAACC,GAAD,EAAMC,OAAN,EAAe;AACtB,UAAMC,QAAQ,GAAG,MAAMH,KAAK,CAAE,GAAE,KAAKD,OAAQ,GAAEE,GAAI,EAAvB,EAA0B,EAClD;AACA,SAAGC,OAF+C;AAGlDE,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL;AACA,WAAGF,OAAO,CAACE;AAHN;AAHyC,KAA1B,CAA5B,CADsB,CAUtB;AACA;AACA;;AACA,QAAIC,IAAJ;;AACA,QAAI;AACAA,MAAAA,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAb;AACH,KAFD,CAEE,OAAOC,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH,KAlBqB,CAoBtB;;;AACA,QAAIJ,QAAQ,CAACM,MAAT,GAAkB,GAAlB,IAAyBN,QAAQ,CAACM,MAAT,GAAkB,GAA/C,EAAoD;AAChD,YAAMC,OAAO,GAAGL,IAAI,IAAIA,IAAI,CAACK,OAAb,GAAuBL,IAAI,CAACK,OAA5B,GAAsC,0BAAtD;AACA,YAAM,IAAIC,KAAJ,CAAUD,OAAV,CAAN;AACH;;AACD,WAAOL,IAAP;AACH;;AApC2B","sourcesContent":["export default class HttpClient {\n    // 자체적으로 공통적인 baseURL을 가지고 있다.\n    constructor(baseURL) {\n        this.baseURL = baseURL;\n    }\n\n    // 비동기적으로 처리하는 fetch API\n    // URL, options \n    // 자체적으로는 브라우저 API에 있는 fetch API사용\n    // 비동기적인 사고내에서 동기적으로 코드를 작성하려면... await 사용\n    async fetch(url, options) {\n        const response = await fetch(`${this.baseURL}${url}`, {\n            // 사용자가 원하는 옵션들을 하나하나씩 풀어서 추가\n            ...options,\n            headers: {\n                'Content-Type': 'application/json',\n                // 사용자가 원하는 옵션들의 헤더에 추가적으로 있는 부분들 추가\n                ...options.headers,\n            }\n        })\n        // json()도 promise이므로 await 붙여준다.\n        // body가 없는 response에 json을 붙이면 에러가 일어날 수 있으므로\n        // 이 부분을 try/catch로 감싸준다.\n        let data;\n        try {\n            data = await response.json();\n        } catch (error) {\n            console.error(error);\n        }\n\n        // response의 상태코드가 200대가 아니라면 \n        if (response.status > 299 || response.status < 200) {\n            const message = data && data.message ? data.message : 'Something went wrong! 😭'\n            throw new Error(message);\n        }\n        return data;\n    }\n}"]},"metadata":{},"sourceType":"module"}
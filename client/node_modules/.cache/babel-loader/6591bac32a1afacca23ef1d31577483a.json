{"ast":null,"code":"export default class TweetService {\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n  }\n\n  async getTweets(username) {\n    const query = username ? `?username=${username}` : '';\n    const response = await fetch(`${this.baseURL}/tweets${query}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  }\n\n  async postTweet(text) {\n    const response = await fetch(`${this.baseURL}/tweets`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text,\n        username: 'ellie',\n        name: 'Ellie'\n      })\n    });\n    const data = await response.json();\n\n    if (response.status !== 201) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  }\n\n  async deleteTweet(tweetId) {\n    const response = await fetch(`${this.baseURL}/tweets${tweetId}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n  }\n\n  async updateTweet(tweetId, text) {\n    const tweet = this.tweets.find(tweet => tweet.id === tweetId);\n\n    if (!tweet) {\n      throw new Error('tweet not found!');\n    }\n\n    tweet.text = text;\n    return tweet;\n  }\n\n}","map":{"version":3,"sources":["/Users/syl/Desktop/dreamCoding_code/12-client-template/client/src/service/tweet.js"],"names":["TweetService","constructor","baseURL","getTweets","username","query","response","fetch","method","headers","data","json","status","Error","message","postTweet","text","body","JSON","stringify","name","deleteTweet","tweetId","updateTweet","tweet","tweets","find","id"],"mappings":"AAAA,eAAe,MAAMA,YAAN,CAAmB;AAEhCC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACD;;AAEc,QAATC,SAAS,CAACC,QAAD,EAAW;AACxB,UAAMC,KAAK,GAAGD,QAAQ,GAAI,aAAYA,QAAS,EAAzB,GAA6B,EAAnD;AACA,UAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKL,OAAQ,UAASG,KAAM,EAAhC,EAAmC;AAC7DG,MAAAA,MAAM,EAAE,KADqD;AAE7DC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAFoD,KAAnC,CAA5B;AAKA,UAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;;AACA,QAAIL,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN;AACD;;AACD,WAAOJ,IAAP;AACD;;AAEc,QAATK,SAAS,CAACC,IAAD,EAAO;AACpB,UAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKL,OAAQ,SAAjB,EAA2B;AACrDM,MAAAA,MAAM,EAAE,MAD6C;AAErDC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAF4C;AAGrDQ,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEH,QAAAA,IAAF;AAAQZ,QAAAA,QAAQ,EAAE,OAAlB;AAA2BgB,QAAAA,IAAI,EAAE;AAAjC,OAAf;AAH+C,KAA3B,CAA5B;AAMA,UAAMV,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;;AACA,QAAIL,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN;AACD;;AACD,WAAOJ,IAAP;AACD;;AAEgB,QAAXW,WAAW,CAACC,OAAD,EAAU;AACzB,UAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKL,OAAQ,UAASoB,OAAQ,EAAlC,EAAqC;AAC/Dd,MAAAA,MAAM,EAAE,QADuD;AAE/DC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAFsD,KAArC,CAA5B;AAKA,UAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;;AACA,QAAIL,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN;AACD;AACF;;AAEgB,QAAXS,WAAW,CAACD,OAAD,EAAUN,IAAV,EAAgB;AAC/B,UAAMQ,KAAK,GAAG,KAAKC,MAAL,CAAYC,IAAZ,CAAkBF,KAAD,IAAWA,KAAK,CAACG,EAAN,KAAaL,OAAzC,CAAd;;AACA,QAAI,CAACE,KAAL,EAAY;AACV,YAAM,IAAIX,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACDW,IAAAA,KAAK,CAACR,IAAN,GAAaA,IAAb;AACA,WAAOQ,KAAP;AACD;;AArD+B","sourcesContent":["export default class TweetService {\n\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n  }\n\n  async getTweets(username) {\n    const query = username ? `?username=${username}` : '';\n    const response = await fetch(`${this.baseURL}/tweets${query}`, {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const data = await response.json();\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n    return data;\n  }\n\n  async postTweet(text) {\n    const response = await fetch(`${this.baseURL}/tweets`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ text, username: 'ellie', name: 'Ellie' }),\n    });\n\n    const data = await response.json();\n    if (response.status !== 201) {\n      throw new Error(data.message);\n    }\n    return data;\n  }\n\n  async deleteTweet(tweetId) {\n    const response = await fetch(`${this.baseURL}/tweets${tweetId}`, {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const data = await response.json();\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n  }\n\n  async updateTweet(tweetId, text) {\n    const tweet = this.tweets.find((tweet) => tweet.id === tweetId);\n    if (!tweet) {\n      throw new Error('tweet not found!');\n    }\n    tweet.text = text;\n    return tweet;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}